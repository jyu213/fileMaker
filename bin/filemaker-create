#!/usr/bin/env node

const path = require('path')
const fs = require('fs')
const program = require('commander')
const FileMaker = require('../lib/make')
const inquirer = require('inquirer')

let ROOT_PATH
if (process.env.HOME) {
  ROOT_PATH = path.resolve(process.env.HOME, '.fileMaker')
} else if (process.env.HOMEDRIVE) {
  ROOT_PATH = path.resolve(process.env.HOMEDRIVE, '.fileMaker')
} else {
  console.log('Environment variable HOME (Linux) or HOMEPATH (Windows) are not set')
  ROOT_PATH = path.resolve(__dirname)
}
const TEMPLATE_PATH = path.join(ROOT_PATH, 'template')
const CONFIG_PATH = path.join(ROOT_PATH, 'config.json')
const CONFIG = require(CONFIG_PATH)

const parseTemplate = require('../lib/parseTemplate')
const build = function (destFile, templatePath, program) {
  let maker = new FileMaker(destFile)
  if (!program.data) {
    const templateFile = fs.readFileSync(templatePath, {encoding: 'utf8'})
    const arr = parseTemplate(templateFile)
    let schemaArr = []

    if (arr.length > 0) {
      schemaArr = arr.map((item) => {
        return {
          type: 'input',
          name: item,
          message: `type the value of ${item}`,
          default: ''
        }
      })
    }

    inquirer.prompt(schemaArr).then((data) => {
      console.log(data, 'prompt data')
      maker.run(templatePath, data)
    }).catch((err) => {
      console.log('Error: ', err)
    })
    return false
  }

  console.log(destFile, templatePath, program.data, 'program')
  maker.run(templatePath, program.data)
}

program
  .usage('[output file name] [options]')
  .option('-t --template <dir>', 'use template file')
  .option('-d --data <dir>', 'use source data')
  .action((dir) => {
    if (!dir) {
      return program.help()
    }

    if (!program.template) {
      // it will read from config file
      if (CONFIG.fileSelect) {
        program.template = path.resolve(TEMPLATE_PATH, CONFIG.fileSelect)
      } else {
        console.log('Error: there is no tempalte file or select default template')
        return false
      }
    }

    let templatePath
    // add support find from root template dir
    if (fs.existsSync(program.template)) {
      templatePath = program.template
    } else if (fs.existsSync(path.resolve(TEMPLATE_PATH, program.template))) {
      templatePath = path.resolve(TEMPLATE_PATH, program.template)
    } else {
      console.log(`Error: can't find template %s`, program.template)
      return false
    }

    // auto create dest file
    if (dir.indexOf('[object Object]') !== -1) {
      const destFile = path.basename(templatePath)

      inquirer.prompt({
        type: 'confirm',
        name: 'dir',
        message: `would you want to create file ${destFile}?`,
        default: destFile
      }).then((data) => {
        if (data.dir) {
          build(destFile, templatePath, program)
        } else {
          console.log('Error: must be need dest file name')
        }
      })
      return false
    }
    build(dir, templatePath, program)
  })
  .parse(process.argv)
