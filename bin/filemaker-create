#!/usr/bin/env node

const path = require('path')
const program = require('commander')
const FileMaker = require('../lib/make')
const inquirer = require('inquirer')
// const co = require('co')

let ROOT_PATH
if (process.env.HOME) {
  ROOT_PATH = path.resolve(process.env.HOME, '.fileMaker')
} else if (process.env.HOMEDRIVE) {
  ROOT_PATH = path.resolve(process.env.HOMEDRIVE, '.fileMaker')
} else {
  console.log('Environment variable HOME (Linux) or HOMEPATH (Windows) are not set')
  ROOT_PATH = path.resolve(__dirname)
}
const TEMPLATE_PATH = path.join(ROOT_PATH, 'template')
const CONFIG_PATH = path.join(ROOT_PATH, 'config.json')
const CONFIG = require(CONFIG_PATH)

const parseTemplate = require('../lib/parseTemplate')

program
  .usage('<output file name> [options]')
  .option('--template <dir>', 'use template file')
  .option('--data <dir>', 'use source data')
  .action((dir) => {
    if (!dir) {
      console.log('dir is miss')
      return program.help()
    }
    let maker = new FileMaker(dir)

    if (!program.template) {
      // it will read from config file
      if (CONFIG.fileSelect) {
        program.template = path.resolve(TEMPLATE_PATH, CONFIG.fileSelect)
        console.log(program.template, 'program.template')
      } else {
        console.log('error: there is no tempalte file or select default template')
        return false
      }
    }
    if (!program.data) {
      const fs = require('fs')
      const templateFile = fs.readFileSync(program.template, {encoding: 'utf8'})

      const arr = parseTemplate(templateFile)
      let schemaArr = []

      if (arr.length > 0) {
        schemaArr = arr.map((item) => {
          return {
            type: 'input',
            name: item,
            message: `type the value of ${item}`,
            default: ''
          }
        })
      }

      // co(function *() {
      //   let result = yield inquirer.prompt(schemaArr)
      // })

      inquirer.prompt(schemaArr).then((data) => {
        console.log(data, 'prompt data')
        maker.run(program.template, data)
      }).catch((err) => {
        console.log(err, 'err')
      })
      return false
    }

    console.log(dir, program.template, program.data, 'program')
    maker.run(program.template, program.data)
  })
  .parse(process.argv)


